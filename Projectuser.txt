1. Allow Users to View Their Assigned Projects
To allow users to view only the projects they are assigned to, modify the ProjectsController index action to filter projects based on the currently logged-in user.

Update the ProjectsController:
In app/controllers/projects_controller.rb:

ruby
Copy code
class ProjectsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_project, only: [:show, :edit, :update]
  before_action :authorize_project_access!, only: [:show, :edit, :update]

  # Show all projects (for Admins, Project Managers, and Users)
  def index
    if current_user.admin?
      @projects = Project.all
    elsif current_user.project_manager?
      @projects = Project.where(project_manager_id: current_user.id)
    elsif current_user.user?
      @projects = current_user.projects
    end
  end

  # Show a single project (for Users and Project Managers)
  def show
    # Project details will be handled by the view
  end

  # Edit action only for Project Manager and Admin
  def edit
    redirect_to root_path, alert: "Access denied." unless current_user.project_manager? || current_user.admin?
  end

  # Update action for Project Managers or Admin
  def update
    if @project.update(project_params)
      redirect_to @project, notice: "Project updated successfully."
    else
      render :edit, alert: "Unable to update project."
    end
  end

  private

  # Strong params for updating the project
  def project_params
    params.require(:project).permit(:name, :description)
  end

  # Set project for actions
  def set_project
    @project = Project.find(params[:id])
  end

  # Ensure users can only access projects they are assigned to
  def authorize_project_access!
    unless current_user.admin? || current_user.project_manager? || @project.users.include?(current_user)
      redirect_to root_path, alert: "Access denied."
    end
  end
end
2. Update Views for Users to View Assigned Projects
Users should be able to see their assigned projects in the index view and view individual project details in the show view.

Update app/views/projects/index.html.erb:
erb
Copy code
<h1>Your Assigned Projects</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @projects.each do |project| %>
      <tr>
        <td><%= project.name %></td>
        <td><%= project.description %></td>
        <td>
          <%= link_to 'View', project_path(project), class: "btn btn-primary" %>
          <% if current_user.project_manager? || current_user.admin? %>
            <%= link_to 'Edit', edit_project_path(project), class: "btn btn-secondary" %>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>
Update app/views/projects/show.html.erb:
erb
Copy code
<h1>Project Details</h1>

<p><strong>Name:</strong> <%= @project.name %></p>
<p><strong>Description:</strong> <%= @project.description %></p>

<% if current_user.project_manager? || current_user.admin? %>
  <%= link_to 'Edit Project', edit_project_path(@project), class: "btn btn-secondary" %>
<% end %>

<%= link_to 'Back to Projects', projects_path, class: "btn btn-secondary" %>
3. Allow Users to Update Specific Fields (If Applicable)
If you want users to update certain fields of the project (e.g., mark progress or leave comments), you can open specific fields for them in the update action, but only for fields that make sense for the user to update.

For example, if users can leave a progress update, you can add a progress field to the project:

Migration to Add Progress Field (optional):
bash
Copy code
rails generate migration AddProgressToProjects progress:string
rails db:migrate
Update project_params to Allow User Updates:
In ProjectsController:

ruby
Copy code
def project_params
  if current_user.project_manager? || current_user.admin?
    params.require(:project).permit(:name, :description, :progress)
  else
    params.require(:project).permit(:progress)
  end
end
Add Progress Field to the show.html.erb View (optional):
erb
Copy code
<h2>Progress</h2>

<% if current_user.user? %>
  <%= form_for @project do |f| %>
    <div class="field">
      <%= f.label :progress %>
      <%= f.text_field :progress %>
    </div>
    <div class="actions">
      <%= f.submit "Update Progress", class: "btn btn-primary" %>
    </div>
  <% end %>
<% else %>
  <p><strong>Progress:</strong> <%= @project.progress %></p>
<% end %>
4. Routing for Project Views and Updates
In config/routes.rb, make sure the routes for viewing and updating projects are properly set up:

ruby
Copy code
resources :projects, only: [:index, :show, :edit, :update]
Conclusion
With these changes:

Users can view only their assigned projects in the index view.
Users can see project details and update certain fields (like progress) if necessary.
Admins and Project Managers retain their full control over projects.
This structure ensures that users can manage the projects they’re assigned to while maintaining role-based access control.







. Check Your Migration for project_manager_id
If you already generated the Project model, check if the migration for the projects table contains the project_manager_id column.

Look for the migration file in db/migrate/ (the file name will contain a timestamp). Open it and ensure that there is a reference to project_manager_id.

For example, the migration should look something like this:

ruby
Copy code
class CreateProjects < ActiveRecord::Migration[6.1]
  def change
    create_table :projects do |t|
      t.string :name
      t.text :description
      t.references :project_manager, foreign_key: { to_table: :users } # <-- Ensure this line exists
      t.timestamps
    end
  end
end
2. Generate a New Migration (if the column is missing)
If the project_manager_id column is missing, you need to generate a new migration to add this column to the projects table.

Run this command to generate a new migration:

bash
Copy code
rails generate migration AddProjectManagerToProjects project_manager:references
This will create a new migration file. Open the newly generated migration file and confirm it looks like this:

ruby
Copy code
class AddProjectManagerToProjects < ActiveRecord::Migration[6.1]
  def change
    add_reference :projects, :project_manager, foreign_key: { to_table: :users }
  end
end
3. Run the Migration
Once the migration is ready, apply the changes to the database by running:

bash
Copy code
rails db:migrate
This will update the schema and add the project_manager_id column to the projects table.

4. Check the Schema
After migrating, verify that the column was added by checking the schema.rb file in the db folder. It should now include:

ruby
Copy code
create_table "projects", force: :cascade do |t|
  t.string "name"
  t.text "description"
  t.bigint "project_manager_id"  # <-- Ensure this column exists
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end
Conclusion
This process will fix the "No such column: project_manager_id" error by ensuring the project_manager_id column is correctly added to the projects table and the database schema is properly updated.











1. Check Your Migration for the Correct Foreign Key Reference
In your migration file where you added project_manager_id, make sure that it references the users table, not a project_manager table.

Your migration should look like this:

ruby
Copy code
class AddProjectManagerToProjects < ActiveRecord::Migration[6.1]
  def change
    add_reference :projects, :project_manager, foreign_key: { to_table: :users }
  end
end
The key part is: foreign_key: { to_table: :users }. This ensures that project_manager_id in the projects table is correctly linked to the users table, where the project manager is actually stored.

2. Ensure You Migrated the Database Correctly
If your migration is correct but the table doesn't exist, you might not have run your migration correctly or it might have failed previously. Run the following commands:

bash
Copy code
rails db:migrate:status
This will show whether the migration to add project_manager_id was successfully applied. If it’s pending, run the migration:

bash
Copy code
rails db:migrate
If the migration fails or there are issues, you can try rolling back and re-running it:

bash
Copy code
rails db:rollback STEP=1
rails db:migrate
3. Verify the Foreign Key Setup in Schema
Check your db/schema.rb file to ensure the projects table is correctly referencing the users table via the project_manager_id. You should see something like this:

ruby
Copy code
create_table "projects", force: :cascade do |t|
  t.string "name"
  t.text "description"
  t.bigint "project_manager_id"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
  t.index ["project_manager_id"], name: "index_projects_on_project_manager_id"
end

add_foreign_key "projects", "users", column: "project_manager_id"
The important part is add_foreign_key "projects", "users", column: "project_manager_id", which links the project_manager_id in projects to the users table.

Conclusion
This error arises because project_manager is not a separate table but should be a reference to the users table. By ensuring your migration file properly references users, and by running your migrations correctly, you can fix the "No such table: main.project_manager" error.















. Ensure project_manager_id is Assigned When Creating a Project
If you're using the project_manager_id to track the creator or manager of a project, you must assign the current user as the project_manager when the project is created.

In your ProjectsController, ensure that when a project is created, you assign the project_manager_id to the current logged-in user.

For example, in app/controllers/projects_controller.rb:

ruby
Copy code
def create
  @project = current_user.managed_projects.build(project_params)
  if @project.save
    redirect_to @project, notice: 'Project created successfully.'
  else
    render :new, alert: 'Unable to create project.'
  end
end
Here, current_user.managed_projects.build automatically assigns the current_user.id to the project_manager_id field.

Make sure that managed_projects is properly defined in your User model:

In app/models/user.rb:

ruby
Copy code
class User < ApplicationRecord
  has_many :managed_projects, class_name: 'Project', foreign_key: 'project_manager_id'
end
2. Check Your Project Model
In app/models/project.rb, ensure that your Project model correctly associates a project with a project manager (which is a user).

ruby
Copy code
class Project < ApplicationRecord
  belongs_to :project_manager, class_name: 'User', foreign_key: 'project_manager_id'
  has_and_belongs_to_many :users
end
This ensures that the project_manager_id is referencing a user, not a user_id field (unless you're using user_id for other purposes).

3. Update the Migration (if Needed)
If you're mistakenly using user_id and it should be project_manager_id, you can generate a migration to rename the column.

For example, to rename user_id to project_manager_id:

bash
Copy code
rails generate migration RenameUserIdToProjectManagerIdInProjects
Then, update the generated migration file:

ruby
Copy code
class RenameUserIdToProjectManagerIdInProjects < ActiveRecord::Migration[6.1]
  def change
    rename_column :projects, :user_id, :project_manager_id
  end
end
Then run the migration:

bash
Copy code
rails db:migrate
4. Handle the Form Correctly
In the form where the project is created (app/views/projects/new.html.erb), ensure that you are not manually providing the project_manager_id via the form (because this should be set automatically as the current user).

For example:

erb
Copy code
<%= form_for @project do |f| %>
  <div class="field">
    <%= f.label :name %>
    <%= f.text_field :name %>
  </div>

  <div class="field">
    <%= f.label :description %>
    <%= f.text_area :description %>
  </div>

  <div class="actions">
    <%= f.submit 'Create Project' %>
  </div>
<% end %>
Do not include a field for project_manager_id because that will be set in the controller.

Conclusion
The "Not null constraints failed: projects.user_id" error likely occurs because user_id or project_manager_id isn't being properly set when a project is created. To fix this:

Ensure that the project_manager_id is automatically assigned to the current user.
Check your migrations and ensure that user_id or project_manager_id is being used correctly.
Run the necessary migrations if the columns need renaming or updating.





