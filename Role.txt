1. Create a new Rails Project
bash
Copy code
rails new ProjectManagement
cd ProjectManagement
2. Set up User Authentication with Devise
First, add Devise to your Gemfile:

ruby
Copy code
gem 'devise'
Then run:

bash
Copy code
bundle install
rails generate devise:install
Generate a User model with Devise:

bash
Copy code
rails generate devise User
3. Add Additional Fields to the User Model
We'll need to add first_name, last_name, username, and role fields to the User model. Generate a migration to add these columns:

bash
Copy code
rails generate migration AddDetailsToUsers first_name:string last_name:string username:string role:string
Run the migration:

bash
Copy code
rails db:migrate
Now, update the User model to include validations for these fields:

ruby
Copy code
class User < ApplicationRecord
  # Include default devise modules
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  # Validation
  validates :first_name, :last_name, :username, presence: true
  validates :role, inclusion: { in: %w[admin project_manager user] }

  ROLES = %w[admin project_manager user]

  def admin?
    role == 'admin'
  end

  def project_manager?
    role == 'project_manager'
  end

  def user?
    role == 'user'
  end
end
4. Configure Devise to Permit Additional Fields
To allow Devise to accept the additional fields during sign-up, update the ApplicationController with strong parameters:

ruby
Copy code
class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, :username, :role])
    devise_parameter_sanitizer.permit(:account_update, keys: [:first_name, :last_name, :username, :role])
  end
end
5. Set up Role-Based Access Control
We'll use the before_action method in the ApplicationController to restrict access based on roles:

ruby
Copy code
class ApplicationController < ActionController::Base
  before_action :authenticate_user!

  def after_sign_in_path_for(resource)
    case current_user.role
    when 'admin'
      admin_dashboard_path
    when 'project_manager'
      project_manager_dashboard_path
    else
      user_dashboard_path
    end
  end
end
6. Create Admin, Project Manager, and User Dashboards
Generate controllers and views for each role:

bash
Copy code
rails generate controller AdminDashboard index
rails generate controller ProjectManagerDashboard index
rails generate controller UserDashboard index
In each controller, you can restrict access by role:

For AdminDashboard:

ruby
Copy code
class AdminDashboardController < ApplicationController
  before_action :admin_only

  def index
    @users = User.all
  end

  private

  def admin_only
    redirect_to(root_path, alert: "Access denied.") unless current_user.admin?
  end
end
For ProjectManagerDashboard:

ruby
Copy code
class ProjectManagerDashboardController < ApplicationController
  before_action :project_manager_only

  def index
    @projects = Project.all
  end

  private

  def project_manager_only
    redirect_to(root_path, alert: "Access denied.") unless current_user.project_manager?
  end
end
For UserDashboard:

ruby
Copy code
class UserDashboardController < ApplicationController
  def index
    @projects = Project.all
  end
end
7. Admin User Management
The Admin should be able to manage users and assign roles. You can generate a controller and views for User management:

bash
Copy code
rails generate controller Users
In UsersController, allow the admin to update user roles:

ruby
Copy code
class UsersController < ApplicationController
  before_action :admin_only

  def index
    @users = User.all
  end

  def edit
    @user = User.find(params[:id])
  end

  def update
    @user = User.find(params[:id])
    if @user.update(user_params)
      redirect_to users_path, notice: 'User role updated successfully.'
    else
      render :edit
    end
  end

  private

  def user_params
    params.require(:user).permit(:first_name, :last_name, :username, :role)
  end

  def admin_only
    redirect_to(root_path, alert: "Access denied.") unless current_user.admin?
  end
end
8. Project Management for Project Managers
Generate a Project model:

bash
Copy code
rails generate scaffold Project name:string description:text user:references
In the ProjectsController, restrict project creation to Project Managers:

ruby
Copy code
class ProjectsController < ApplicationController
  before_action :project_manager_only, only: [:new, :create]

  def index
    @projects = Project.all
  end

  def new
    @project = Project.new
  end

  def create
    @project = current_user.projects.build(project_params)
    if @project.save
      redirect_to projects_path, notice: 'Project created successfully.'
    else
      render :new
    end
  end

  private

  def project_params
    params.require(:project).permit(:name, :description)
  end

  def project_manager_only
    redirect_to(root_path, alert: "Access denied.") unless current_user.project_manager?
  end
end
9. Views and Routes
Update the routes to define the paths for each dashboard:

ruby
Copy code
Rails.application.routes.draw do
  devise_for :users
  resources :users, only: [:index, :edit, :update]
  resources :projects

  authenticated :user, -> user { user.admin? } do
    root 'admin_dashboard#index', as: :admin_dashboard
  end

  authenticated :user, -> user { user.project_manager? } do
    root 'project_manager_dashboard#index', as: :project_manager_dashboard
  end

  authenticated :user, -> user { user.user? } do
    root 'user_dashboard#index', as: :user_dashboard
  end

  root 'home#index'
end
10. Run Your Application
Finally, start the Rails server:

bash
Copy code
rails server








. Create the HomeController
The error you encountered ("Uninitialized constant HomeController") is because we referenced a HomeController in the routes.rb file, but we didn't create it.

To fix this, let's generate the HomeController:

bash
Copy code
rails generate controller Home index
This will generate the necessary controller and view for the home page.

2. Update the HomeController
Open app/controllers/home_controller.rb and define an action for the index method:

ruby
Copy code
class HomeController < ApplicationController
  def index
  end
end
Now create a simple view for the home#index action. In app/views/home/index.html.erb:

erb
Copy code
<h1>Welcome to the Project Management App</h1>
<p>Please log in to continue.</p>
3. Fixing the Route Priority
In Rails, routes are matched from top to bottom. If two routes could potentially match the same URL, the first route in the file will be used. Ensure that your route for the authenticated users' dashboards is correctly placed above the general root path. Here's an updated routes.rb example:

ruby
Copy code
Rails.application.routes.draw do
  devise_for :users
  resources :users, only: [:index, :edit, :update]
  resources :projects

  # Authenticated routes for different roles
  authenticated :user, -> user { user.admin? } do
    root 'admin_dashboard#index', as: :admin_dashboard
  end

  authenticated :user, -> user { user.project_manager? } do
    root 'project_manager_dashboard#index', as: :project_manager_dashboard
  end

  authenticated :user, -> user { user.user? } do
    root 'user_dashboard#index', as: :user_dashboard
  end

  # Default root route for unauthenticated users
  root 'home#index'
end
Explanation:
The root 'home#index' will only be hit if the user is unauthenticated (or doesn't match any of the previous conditions).
Authenticated routes for admin, project_manager, and user are placed above the general root route, so they get matched first if a user is logged in.
4. Restart the Server
Once you've made these changes, restart your Rails server:

bash
Copy code
rails server












1. Generate Devise Views
First, generate the Devise views if you haven't done so already. This will allow you to modify the default views that Devise provides, including the sign-up form.

bash
Copy code
rails generate devise:views
This will create the views for Devise inside app/views/devise.

2. Customize the Sign-up Form
The sign-up form is located at app/views/devise/registrations/new.html.erb. You can customize this view to include the additional fields (first name, last name, username, and role).

Hereâ€™s an example of a customized sign-up form that includes those fields:

erb
Copy code
<h2>Sign up</h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= devise_error_messages! %>

  <div class="field">
    <%= f.label :first_name %><br />
    <%= f.text_field :first_name, autofocus: true, autocomplete: "first_name" %>
  </div>

  <div class="field">
    <%= f.label :last_name %><br />
    <%= f.text_field :last_name, autocomplete: "last_name" %>
  </div>

  <div class="field">
    <%= f.label :username %><br />
    <%= f.text_field :username, autocomplete: "username" %>
  </div>

  <div class="field">
    <%= f.label :role %><br />
    <%= f.select :role, User::ROLES.map { |role| [role.humanize, role] }, {}, class: "form-select" %>
  </div>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autocomplete: "email" %>
  </div>

  <div class="field">
    <%= f.label :password %>
    <% if @minimum_password_length %>
      <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="actions">
    <%= f.submit "Sign up" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>
Explanation:
First Name, Last Name, Username, Role: These fields are now part of the sign-up form. We added first_name, last_name, username, and role inputs, where the role is presented as a dropdown select box.
Role Selection: f.select :role, User::ROLES.map { |role| [role.humanize, role] } is used to create a dropdown list where the user can select their role (admin, project_manager, or user). This uses the predefined ROLES array from your User model.
3. Permit the New Fields in Devise (Strong Parameters)
As mentioned earlier, ensure that you've added the necessary strong parameters in your ApplicationController to permit these fields:

ruby
Copy code
class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, :username, :role])
    devise_parameter_sanitizer.permit(:account_update, keys: [:first_name, :last_name, :username, :role])
  end
end
4. Style the Form (Optional)
If youâ€™re using Bootstrap or any other CSS framework, you can add classes to your form fields and buttons for better styling. For example, with Bootstrap:

erb
Copy code
<%= f.text_field :first_name, class: 'form-control', autofocus: true, autocomplete: "first_name" %>
5. Test the Sign-up Flow
Now, when you visit /users/sign_up, you should see a customized form with fields for the user's first name, last name, username, and role. After filling out the form and signing up, the user should be created with all the extra attributes saved in the database.

This form will also apply the role-based access control once users log in, as we set up previously.






module ApplicationHelper
  def role_options_for_sign_up
    if current_user&.admin?
      User::ROLES.map { |role| [role.humanize, role] } # Show all roles to admins
    else
      User::ROLES.reject { |role| role == 'admin' }.map { |role| [role.humanize, role] } # Show only non-admin roles to others
    end
  end
end
